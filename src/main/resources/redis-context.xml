<beans xmlns="http://www.springframework.org/schema/beans"  
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
     xmlns:context="http://www.springframework.org/schema/context"  
     xmlns:mvc="http://www.springframework.org/schema/mvc"  
     xsi:schemaLocation="http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans.xsd 
     http://www.springframework.org/schema/context 
     http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/mvc 
     http://www.springframework.org/schema/mvc/spring-mvc.xsd">  
	
	<!-- 引入redis配置 -->
	<context:property-placeholder location="classpath:redis.properties"/> 
	
    <!-- redis 配置 --> 
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
        <property name="maxTotal" value="${redis.maxTotal}" /> 
        <property name="maxIdle" value="${redis.maxIdle}" /> 
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" /> 
        <property name="testOnBorrow" value="${redis.testOnBorrow}" /> 
    </bean> 
    
    <!-- redis连接池的配置 -->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool"> 
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/> 
        <constructor-arg name="host" value="${redis.ip}"/> 
        <constructor-arg name="port" value="${redis.port}"/> 
    </bean>
    
    <!-- redis连接工厂 --> 
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> 
        <property name="hostName" value="${redis.ip}" /> 
        <property name="port" value="${redis.port}" /> 
        <property name="poolConfig" ref="jedisPoolConfig" /> 
    </bean> 
    
    <!-- redisTemplate配置，redisTemplate是对Jedis的对redis操作的扩展，有更多的操作，封装使操作更便捷 --> 
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 
        <property name="connectionFactory" ref="jedisConnectionFactory" /> 
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，
        	那么会提示错误User can't cast to String！！  -->
        <property name="keySerializer" >    
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />    
        </property>
        <property name="valueSerializer" >    
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />    
        </property>
        <property name="hashKeySerializer">    
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>    
        </property>
        <property name="hashValueSerializer">    
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>    
        </property>        
    </bean>
	
</beans>
